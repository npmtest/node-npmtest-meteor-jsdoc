{"/home/travis/build/npmtest/node-npmtest-meteor-jsdoc/test.js":"/* istanbul instrument in package npmtest_meteor_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meteor-jsdoc/lib.npmtest_meteor_jsdoc.js":"/* istanbul instrument in package npmtest_meteor_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_meteor_jsdoc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_meteor_jsdoc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-meteor-jsdoc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-meteor-jsdoc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_meteor_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_meteor_jsdoc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_meteor_jsdoc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_meteor_jsdoc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_meteor_jsdoc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_meteor_jsdoc.__dirname + '/lib.npmtest_meteor_jsdoc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meteor-jsdoc/node_modules/meteor-jsdoc/lib/actions.js":"const each    = require(\"lodash/each\");\nconst drop    = require(\"lodash/drop\");\nconst pull    = require(\"lodash/pull\");\nconst spawn   = require(\"child_process\").spawn;\nconst exec    = require('child_process').exec;\nconst fse     = require('fs-extra');\nconst os      = require(\"os\");\nconst path    = require(\"path\");\nconst ejs     = require(\"ejs\");\nconst helpers = require(\"./helpers\");\n\nmodule.exports = Actions;\n\nconst EXAMPLE_DIR = path.resolve(__dirname, \"..\", \"example\");\nconst METEOR_DIR  = path.resolve(EXAMPLE_DIR, \"meteor\");\n\nfunction Actions(config, cwd) {\n  this.cwd    = cwd;\n  this.config = config;\n\n  helpers.debug(\"DEBUG: config =\", config);\n}\n\nActions.prototype._applyTemplate = function(file, vars, callback) {\n  var self = this;\n\n  fse.readFile(file, { encoding: \"utf8\" }, (err, content) => {\n    if (err) {\n      callback(err);\n    } else {\n      if (vars) {\n        content = ejs.compile(content, {})(vars);\n      }\n\n      callback(null, content);\n    }\n  });\n};\n\nActions.prototype.conf = function() {\n  var self = this;\n\n  helpers.info(\"Project's config:\", self.config);\n};\n\nActions.prototype.build = function() {\n  var self = this;\n\n  try {\n    fse.mkdirsSync(self.config.docsPath);\n  } catch(e) {\n    if (e.code != \"EEXIST\") {\n      helpers.error(\"Cannot create docs folder ('docsPath'):\", e);\n\n      process.exit(1);\n    }\n  }\n\n  if (self.config.initMeteor) {\n    var src = path.join(METEOR_DIR);\n    var dest = path.join(self.config.docsPath);\n\n    fse.copySync(src, dest);\n\n    helpers.success(\"Meteor initialized.\");\n  } else if (self.config.updateMeteor) {\n    var src = path.join(METEOR_DIR, \".meteor\");\n    var dest = path.join(self.config.docsPath, \".meteor\");\n\n    fse.copySync(src, dest);\n\n    helpers.success(\"Meteor updated.\");\n  }\n\n  if (self.config.docsConfig) {\n    var srcHead  = path.resolve(METEOR_DIR, \"client\", \"templates\", \"layout.html\");\n    var destHead = path.resolve(self.config.docsPath, \"client\", \"templates\", \"layout.html\");\n\n    self._applyTemplate(srcHead, self.config.docsConfig, (err, content) => {\n      if (err) {\n        helpers.error(err);\n      } else {\n        fse.writeFileSync(destHead, content);\n      }\n    });\n  }\n\n  // XXX: Test if deep folder exist to make sure Meteor is copied.\n  var destClientTemplates = path.resolve(self.config.docsPath, \"client\", \"templates\");\n\n  if (! fse.existsSync(destClientTemplates)) {\n    helpers.error(\"Meteor doesn't appear to be initialized. Please set 'initMeteor' to true in 'jsdoc.conf'.\");\n    process.exit(1);\n  }\n\n  if (self.config.preamble) {\n    var fileName     = \"preamble.md\";\n    var srcPreamble  = path.resolve(EXAMPLE_DIR, fileName);\n    var destPreamble = path.resolve(self.config.docsPath, \"client\", \"templates\", fileName);\n\n    if (fse.existsSync(destPreamble)) {\n      var log = `Skipped ${fileName} copy to avoid overwritting.`;\n\n      helpers.warn(log);\n    } else {\n      fse.copySync(srcPreamble, destPreamble);\n    }\n  }\n\n  fse.mkdirsSync(path.join(self.config.docsPath, \"client\", \"data\"));\n\n  process.env.DOCS_PATH    = self.config.docsPath;\n  process.env.PROJECT_REPO = self.config.projectRepo;\n\n  var nodePath      = os.platform() === \"win32\" ? \"\" : `\"${self.config.nodePath}\"`;\n  var jsdocPath     = `\"${path.resolve(__dirname, \"..\", \"node_modules\", \".bin\", \"jsdoc\")}\"`;\n  var jsdocArgs     = self.config.debug ? \"--debug\" : \"--verbose\";\n  var jsdocTmplPath = `\"${path.resolve(__dirname, \"..\", \"template\")}\"`;\n  var jsdocConf     = `\"${path.resolve(\"jsdoc-conf.json\")}\"`;\n  var docsPath      = `\"${self.config.docsPath}\"`;\n\n  var cmd = `find . -type f ! -path \"*/.git/*\" ! -path \"*/.meteor/*\" | xargs grep -lswH \"@summary\" | xargs -L 10000 -t ${nodePath} ${jsdocPath} ${jsdocArgs} -t ${jsdocTmplPath} -c ${jsdocConf} -d ${docsPath} 2>&1`;\n\n  exec(cmd, (error, stdout, stderr) => {\n    if (stderr) {\n      helpers.error(stderr);\n\n      return;\n    }\n\n    var logs = stdout.split(\"\\n\");\n\n    // Show cmd ran when in debug mode\n    helpers.debug(\"DEBUG:\", logs[0]);\n\n    each(drop(logs), (log) => {\n      if (log.startsWith(\"DEBUG\")) {\n        helpers.debug(log);\n      } else if (log.startsWith(\"WARNING\")) {\n        helpers.warn(log);\n      } else if (log.startsWith(\"ERROR\")) {\n        helpers.error(log);\n      } else {\n        helpers.info(log);\n      }\n    });\n\n    if (error !== null) {\n      helpers.warn(\"Docs built with errors.\");\n    } else {\n      helpers.success(\"Docs successfully built.\");\n    }\n  });\n};\n\nActions.prototype.start = function() {\n  var self = this;\n  var cmd  = `meteor --port ${self.config.meteorPort} > app.log 2>&1 &`;\n\n  exec(cmd, { cwd: self.config.docsPath }, (error, stdout, stderr) => {\n    if (error !== null) {\n      helpers.error(error);\n    } else {\n      helpers.success(`Meteor docs server starting at http://localhost:${self.config.meteorPort}/`);\n    }\n  });\n};\n\nActions.prototype.stop = function() {\n  var self         = this;\n  var meteorPidCmd = `ps ax | grep meteor | grep 'index.js --port ${self.config.meteorPort}' | awk '{print $1}'`;\n  var mongoPidCmd  = `ps ax | grep mongod | grep 'dbpath ${self.config.docsPath}' | awk '{print $1}'`;\n\n  var killPid = function(pid) {\n    exec(`kill -9 ${pid}`, (error, stdout, stderr) => {\n      if (error === null) {\n        helpers.success(`Stopped PID: ${pid}.`);\n      }\n    });\n  }\n\n  each([meteorPidCmd, mongoPidCmd], (cmd) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error !== null) {\n        helpers.error(error);\n      } else {\n        pids = pull(stdout.split(\"\\n\"), \"\");\n\n        if (pids.length === 2) {\n          pid = pids[0];\n          killPid(pid);\n        }\n      }\n    });\n  });\n};\n\nActions.init = function() {\n  var jsdocJson     = path.resolve(\"jsdoc.json\");\n  var jsdocConfJson = path.resolve(\"jsdoc-conf.json\");\n\n  if (fse.existsSync(jsdocJson)) {\n    helpers.error(\"A JSDoc project already exists\");\n    process.exit(1);\n  }\n\n  var jsdocJsonExample     = path.resolve(__dirname, \"..\", \"example\", \"jsdoc.json\");\n  var jsdocConfJsonExample = path.resolve(__dirname, \"..\", \"example\", \"jsdoc-conf.json\");\n\n  fse.copySync(jsdocJsonExample, jsdocJson);\n  fse.copySync(jsdocConfJsonExample, jsdocConfJson);\n\n  helpers.success(\"JSDoc project initialized.\");\n  helpers.info(`Check \"${jsdocJson}\" for project specific options.`)\n  helpers.info(`[Advanced] Check \"${jsdocConfJson}\" for jsdoc options.`);\n};\n","/home/travis/build/npmtest/node-npmtest-meteor-jsdoc/node_modules/meteor-jsdoc/lib/helpers.js":"const config = require(\"./config\");\n\nrequire(\"colors\");\n\nvar stringify = function(variable) {\n  return variable ? JSON.stringify(variable, null, 2) : \"\";\n}\n\nexports.printHelp = function() {\n  console.log(`\\nmeteor-jsdoc (v${require(\"../package.json\").version})`);\n  console.log(\"\\n---------------\");\n  console.log(\" Valid Actions \");\n  console.log(\"---------------\");\n  console.log(\"conf  - Show the config for the project.\");\n  console.log(\"init  - Copy the config file to your project's directory.\");\n  console.log(\"build - Build/rebuild the documentation for a Meteor project\");\n  console.log(\"start - Start the meteor server for the docs\");\n  console.log(\"stop  - Stop the meteor server for the docs\\n\");\n};\n\nexports.debug = function(log, variable, raw) {\n  if (config.read().debug) {\n    console.log(stringify(log).gray, raw ? variable.gray : stringify(variable).gray);\n  }\n};\n\nexports.log = function(log, variable) {\n  console.log(stringify(log).blue.bold, stringify(variable).blue.bold);\n};\n\nexports.info = function(log, variable) {\n  console.log(stringify(log).gray.bold, stringify(variable).gray.bold);\n};\n\nexports.error = function(log, variable) {\n  console.log(stringify(log).red.bold, stringify(variable).red.bold);\n};\n\nexports.success = function(log, variable) {\n  console.log(stringify(log).green.bold, stringify(variable).green.bold);\n};\n\nexports.warn = function(log, variable) {\n  console.log(stringify(log).yellow.bold, stringify(variable).yellow.bold);\n};\n","/home/travis/build/npmtest/node-npmtest-meteor-jsdoc/node_modules/meteor-jsdoc/lib/config.js":"const isBoolean = require(\"lodash/isBoolean\");\nconst isEmpty   = require(\"lodash/isEmpty\");\nconst isNumber  = require(\"lodash/isNumber\");\nconst isString  = require(\"lodash/isString\");\nconst cjson     = require(\"cjson\");\nconst path      = require(\"path\");\nconst fse       = require('fs-extra');\nconst os        = require(\"os\");\nconst helpers   = require(\"./helpers\");\n\nrequire(\"colors\");\n\nexports.read = function() {\n  var jsdocJsonPath = path.resolve(\"jsdoc.json\");\n\n  if (fse.existsSync(jsdocJsonPath)) {\n    var jsdocJson = cjson.load(jsdocJsonPath);\n\n    if (typeof jsdocJson.debug === \"undefined\" || ! isBoolean(jsdocJson.debug)) {\n      jsdocJson.debug = false;\n    }\n\n    if (typeof jsdocJson.meteorPort === \"undefined\" || ! isNumber(jsdocJson.meteorPort)) {\n      jsdocJson.meteorPort = 3333;\n    }\n\n    if (typeof jsdocJson.nodePath === \"undefined\" || isEmpty(jsdocJson.nodePath)) {\n      jsdocJson.nodePath = process.execPath;\n    }\n\n    if (typeof jsdocJson.docsPath === \"undefined\" || isEmpty(jsdocJson.docsPath)) {\n      helpers.error(\"Invalid jsdoc.json file: docsPath is not specified.\");\n      process.exit(1);\n    }\n\n    var fullDocsPath   = jsdocJson.docsPath.replace(\"~\", os.homedir());\n    jsdocJson.docsPath = path.resolve(fullDocsPath);\n\n    if (typeof jsdocJson.initMeteor === \"undefined\" || ! isBoolean(jsdocJson.initMeteor)) {\n      jsdocJson.initMeteor = true;\n    }\n\n    if (typeof jsdocJson.updateMeteor === \"undefined\" || ! isBoolean(jsdocJson.updateMeteor)) {\n      jsdocJson.updateMeteor = true;\n    }\n\n    if (typeof jsdocJson.preamble === \"undefined\" || ! isBoolean(jsdocJson.preamble)) {\n      jsdocJson.preamble = true;\n    }\n\n    if (typeof jsdocJson.projectRepo === \"undefined\" || ! isString(jsdocJson.projectRepo)) {\n      jsdocJson.projectRepo = \"\";\n    }\n\n    if (typeof jsdocJson.docsConfig === \"undefined\" || isEmpty(jsdocJson.docsConfig)) {\n      jsdocJson.docsConfig = {\n        \"title\": \"Meteor Project Docs\",\n        \"metas\": {\n          \"description\": \"Documentation for a meteor project.\"\n        }\n      };\n    }\n\n    return jsdocJson;\n  } else {\n    helpers.error(\"jsdoc.json file does not exist!\");\n    helpers.printHelp();\n    process.exit(1);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-meteor-jsdoc/node_modules/meteor-jsdoc/template/publish.js":"/*global require: true */\n(function() {\n  \"use strict\";\n\n  // This file receives data from JSDoc via the `publish` exported function,\n  // and converts it into JSON that is written to a file.\n\n  const fs        = require(\"jsdoc/fs\");\n  const helper    = require(\"jsdoc/util/templateHelper\");\n  const each      = require(\"lodash/each\");\n  const extend    = require(\"lodash/extend\");\n  const stringify = require(\"canonical-json\");\n  const path      = require(\"path\");\n\n  // This is the big map of name -> data that we'll write to a file.\n  var dataContents = {};\n  // List of just the names, which we'll also write to a file.\n  var names        = [];\n\n  /**\n   * Get a tag dictionary from the tags field on the object, for custom fields\n   * like package\n   * @param  {JSDocData} data The thing you get in the TaffyDB from JSDoc\n   * @return {Object}      Keys are the parameter names, values are the values.\n   */\n  var getTagDict = function(data) {\n    var tagDict = {};\n\n    if (data.tags) {\n      each(data.tags, function(tag) {\n        tagDict[tag.title] = tag.value;\n      });\n    }\n\n    return tagDict;\n  };\n\n  // Fix up a JSDoc entry and add it to `dataContents`.\n  var addToData = function(entry) {\n    extend(entry, getTagDict(entry));\n\n    // strip properties we don't want\n    // entry.comment = undefined;\n    entry.___id = undefined;\n    entry.___s  = undefined;\n    entry.tags  = undefined;\n\n    // generate `.filepath` and `.lineno` from `.meta`\n    if (entry.meta && entry.meta.path) {\n      var currentDir = entry.meta.path.replace(process.env.PWD, \"\");\n\n      entry.filename = entry.meta.filename;\n      entry.filepath = process.env.PROJECT_REPO + currentDir + \"/\" + entry.filename;\n      entry.lineno   = entry.meta.lineno;\n    }\n\n    entry.meta = undefined;\n\n    names.push(entry.longname);\n\n    dataContents[entry.longname] = entry;\n  };\n\n  /**\n    Entry point where JSDoc calls us.  It passes us data in the form of\n    a TaffyDB object (which is an in-JS database of sorts that you can\n    query for records.\n\n    @param {TAFFY} taffyData See <http://taffydb.com/>.\n    @param {object} opts\n    @param {Tutorial} tutorials\n   */\n  exports.publish = function(taffyData) {\n    var data = helper.prune(taffyData);\n\n    var namespaces = helper.find(data, { kind: \"namespace\" });\n\n    // prepare all of the namespaces\n    each(namespaces, function(namespace) {\n      if (namespace.summary) {\n        addToData(namespace);\n      }\n    });\n\n    // prepare all of the members\n    var properties = helper.find(data, { kind: \"member\" });\n\n    each(properties, function(property) {\n      if (property.summary) {\n        addToData(property);\n      }\n    });\n\n    // prepare all of the constants\n    var constants = helper.find(data, { kind: \"constant\" });\n\n    each(constants, function(constant) {\n      if (constant.summary) {\n        addToData(constant);\n      }\n    });\n\n    // Callback descriptions are going to be embeded into Function descriptions\n    // when they are used as arguments, so we always attach them to reference\n    // them later.\n    var callbacks = helper.find(data, { kind: \"typedef\" });\n\n    each(callbacks, function(cb) {\n      delete cb.comment;\n      addToData(cb);\n    });\n\n    var functions    = helper.find(data, { kind: \"function\" });\n    var constructors = helper.find(data, { kind: \"class\" });\n\n    // we want to do all of the same transformations to classes and functions\n    functions = functions.concat(constructors);\n\n    // insert all of the function data into the namespaces\n    each(functions, function(func) {\n      if (! func.summary) {\n        // we use the @summary tag to indicate that an item is documented\n        return;\n      }\n\n      var filteredParams = [];\n\n      // Starting a param with `xyz.` makes it a special argument, not a\n      // param.  Dot (`.`) in this case binds tighter than comma, so\n      // `xyz.foo,bar` will create a special argument named `foo, bar`\n      // (representing two arguments in the docs).  We process pipes so\n      // that `xyz.foo|bar` also results in `foo, bar`.\n      each(func.params, function(param) {\n        param.name = param.name.replace(/,|\\|/g, \", \");\n\n        var splitName = param.name.split(\".\");\n\n        if (splitName.length < 2) {\n          // not an option\n          filteredParams.push(param);\n\n          return;\n        }\n\n        if (splitName.length > 2) {\n          param.name = _.rest(splitName).join(\".\");\n        } else {\n          param.name = splitName[1];\n        }\n\n        if (typeof func[splitName[0]] === 'object') {\n          func[splitName[0]].push(param);\n        } else {\n          func[splitName[0]] = [param];\n        }\n      });\n\n      func.params = filteredParams;\n\n      if (typeof func.comment === 'string') {\n        // the entire unparsed doc comment.  takes up too much room in the\n        // data file.\n        delete func.comment;\n      }\n\n      addToData(func);\n    });\n\n    // write full docs JSON\n    var jsonString = stringify(dataContents, null, 2);\n    var jsString = \"DocsData = \" + jsonString + \";\";\n    jsString = \"// This file is automatically generated by meteor-jsdoc. Regenerate it with 'meteor-jsdoc build'\\n\" + jsString;\n    var docsDataFilename = process.env.DOCS_PATH + \"/client/data/docs-data.js\";\n    fs.writeFileSync(docsDataFilename, jsString);\n\n    // write name tree JSON\n    jsonString = stringify(names.sort(), null, 2);\n    jsString = \"DocsNames = \" + jsonString + \";\";\n    jsString = \"// This file is automatically generated by meteor-jsdoc. Regenerate it with 'meteor-jsdoc build'\\n\" + jsString;\n    var nameTreeFilename= process.env.DOCS_PATH + \"/client/data/docs-names.js\";\n    fs.writeFileSync(nameTreeFilename, jsString);\n  };\n})();\n"}